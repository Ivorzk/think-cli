#!/usr/bin/env node
const program = require('commander')
const ora = require('ora')
const Metalsmith = require('metalsmith')
const downloadRaw = require('download-git-repo')
const os = require('os')
const chalk = require('chalk')
const path = require('path')
const helper = require('think-helper')
const utils = require('../lib/utils')
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const download = utils.promisify(downloadRaw, downloadRaw)

/**
 * Usage.
 */

program
  .usage('<controller-name> [module-name]')
  .option('-r, --rest', 'create rest controller')
  .parse(process.argv)

/*
  node ../../think-cli/bin/think controller user home -r
*/

/**
 * Help.
 */

program.on('--help', function () {
  console.log()
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a controller with the name ' + chalk.gray.underline.bold('user')))
  console.log('    $ thinkjs controller name')
  console.log()
  console.log(chalk.gray('    # create rest controller'))
  console.log('    $ thinkjs controller name -r')
  console.log()
})

if (program.args.length < 1) return program.help()

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

/**
 * Start.
 */

if (!utils.isThinkApp(path.resolve('./'))) {
  logger.error(
    'Please execute the command in the '+
    chalk.yellow.underline.bold('thinkjs project') +
    ' root directory'
  )
}

const isMultiModule = helper.isDirectory(path.join(path.resolve('./'), 'src/common'))
const thinkCliInfo = require(path.join(path.resolve('./'), 'package.json')).thinkCli;
const ctrlName = program.args[0]
const moduleName = program.args[1] || thinkCliInfo.defaultModule
const template = thinkCliInfo.cacheTemplatePath && helper.isExist(thinkCliInfo.cacheTemplatePath)
  ? thinkCliInfo.cacheTemplatePath
  : thinkCliInfo.templateName
const cacheTemplatePath = path.join(os.homedir(), '.think-templates', thinkCliInfo.projectName)

if (utils.isLocalPath(template)) {
  generateFn(template)
} else {
  const spinner = ora({text: 'downloading template...', spinner: 'arrow3'}).start();
  ensureTargetPath(cacheTemplatePath)
    .then(downloadFn(template, cacheTemplatePath, {clone: thinkCliInfo.clone}))
    .then(_ => {
      spinner.stop();
      generateFn(cacheTemplatePath);
    })
    .catch(err => logger.error(err))
}

function downloadFn(template, cacheTemplatePath, {clone: thinkCliInfo.clone}) {
  return _ => download(template, cacheTemplatePath, {clone: thinkCliInfo.clone})
}

function ensureTargetPath(path) {
  return helper.isExist(path)
    ? helper.rmdir(path)
    : Promise.resolve();
}

function generateFn(template) {
  const metadata = require(path.join(template, 'metadata'))
  const paths = program.rest
    ? metadata.controller.rest
    : metadata.controller.default

  let sources = [];
  let targets = [];

  for (let i = 0; i < paths.length; i++) {
    const item = paths[i]
    item[1] = path.join('src', isMultiModule ? moduleName : '', item[1])
    item[1] = item[1].replace(/(\[name\])/g, ctrlName)
    sources.push(item[0])
    targets.push(item[1])
  }

  generate(sources, targets)
    .then(files => {
      logger.success('Generated %s', files)
    })
    .catch(err => {
      logger.error(err)
    })
}