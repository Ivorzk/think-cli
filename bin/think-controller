#!/usr/bin/env node

const program = require('commander')
const Metalsmith = require('metalsmith')
const os = require('os')
const chalk = require('chalk')
const path = require('path')
const helper = require('think-helper')
const utils = require('../lib/utils')
const logger = require('../lib/logger')
const generate = require('../lib/generate')

/**
 * Usage.
 */

program
  .usage('<controller-name> [module-name]')
  .option('-r, --rest', 'create rest controller')
  .parse(process.argv)

/*
  thinkjs controller c1 =>  home/controller/c1
  thinkjs controller c1 common => common/controller/c1
  thinkjs controller c1 home => home/controller/c1
  thinkjs controller c1 admin => admin/controller/c1
  thinkjs controller c1/c2 admin => admin/controller/c1/c2
*/

/**
 * Help.
 */

program.on('--help', function () {
  console.log()
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a controller with the name ' + chalk.gray.underline.bold('user')))
  console.log('    $ thinkjs controller name')
  console.log()
  console.log(chalk.gray('    # create rest controller'))
  console.log('    $ thinkjs controller name -r')
  console.log()
})

if (program.args.length < 1) return program.help()

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

/**
 * Start.
 */

if (!utils.isThinkApp(path.resolve('./'))) {
  logger.error(
    'Please execute the command in the '+
    chalk.yellow.underline.bold('thinkjs project') +
    ' root directory'
  )
}

const cacheTemplatePath = path.join(os.homedir(), '.think-templates')
const isMultiModule = helper.isDirectory(path.join('./', 'src/common'))
const ctrlName  = program.args[0]
const moduleName = program.args[1]
const template = utils.isLocalPath(program.args[2])
  ? program.args[2]
  : path.join(cacheTemplatePath, program.args[2].replace(/\//g, '-'))

if (isMultiModule && program.args.length < 2) {
  logger.error(
    'You must enter the '+
    chalk.yellow.underline.bold('module name')
  )
}

const ctrlPath = path.join(template, 'template', require(path.join(template, 'metadata')).paths.controller)
const targetPath = path.join('src', isMultiModule ? moduleName : '', 'controller')

const restPath = path.join(ctrlPath, 'rest.js');
const restTplPath = path.join(ctrlPath, 'restIndex_tpl.js');
const baseTplPath = path.join(ctrlPath, 'index_tpl.js');

restTargetPath = path.join(targetPath, 'rest.js');
baseTplTargetPath = path.join(targetPath, ctrlName + '.js');

let sources = [];
let targets = [];

if (program.rest) {
  sources = [restPath, restTplPath];
  targets = [restTargetPath, baseTplTargetPath];
} else {
  sources = [baseTplPath];
  targets = [baseTplTargetPath];
}

generate(sources, targets)
  .then(path => {
    logger.success('Generated %s', path)
  })
  .catch(err => {
    logger.error(err)
  })
