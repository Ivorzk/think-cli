#!/usr/bin/env node
const program = require('commander')
const os = require('os')
const chalk = require('chalk')
const path = require('path')
const helper = require('think-helper')
const utils = require('../lib/utils')
const logger = require('../lib/logger')
const ThinkAdd = require('../lib/add')

/**
 * Usage.
 */

program
  .usage('<module-name>')
  .parse(process.argv)

/**
 * Help.
 */

program.on('--help', function () {
  console.log()
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a module with the ' + chalk.gray.underline.bold('default name')))
  console.log('    $ thinkjs module')
  console.log()
  console.log(chalk.gray('    # create a module with the name ' + chalk.gray.underline.bold('user')))
  console.log('    $ thinkjs module user')
  console.log()
})

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

/**
 * Start.
 */

const appPath = path.join(path.resolve('./'))
if (!utils.isThinkApp(appPath)) {
  logger.error(
    'Please execute the command in the '+
    chalk.yellow.underline.bold('thinkjs project') +
    ' root directory'
  )
}

const thinkjsInfo = require(path.join(appPath, 'package.json')).thinkjs
const isMultiModule = thinkjsInfo.isMultiModule

if (!isMultiModule) {
  logger.error('app mode is not module, can not create module.')
}


const moduleName = program.args[0] || thinkjsInfo.defaultModule
const template = thinkjsInfo.cacheTemplatePath && helper.isExist(thinkjsInfo.cacheTemplatePath)
  ? thinkjsInfo.cacheTemplatePath
  : thinkjsInfo.templateName
const cacheTemplatePath = path.join(os.homedir(), '.think-templates', thinkjsInfo.projectName)
const paths = require(path.join(template, 'metadata')).module

const add = new ThinkAdd({name: '', moduleName, paths, template, cacheTemplatePath, isMultiModule, clone: thinkjsInfo.clone})

add.run()
  .then(files => {
    logger.success('Generated %s', files)
  })
  .catch(logger.error)
